{
    "sourceFile": "REACT.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1666689929538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1666694548791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,104 +8,5 @@\n 首先，我们可以从函数调用栈入手，理清react的各个模块的功能和它们调用的顺序，盖房子一样，先搭好架子，对源码有个整体的认识，然后再看每个模块的细节，第一遍的时候切忌纠结每个函数实现的细节，陷入各个函数的深度调用中。其次可以结合一些demo和自己画图理解，react源码中设计大量的链表操作，画图是一个很好的理解指针操作的方式。源码里也有一些英文注释，可以根据注释或者根据此react源码解析文章进行理解。\r\n \r\n 熟悉react源码并不是一朝一夕的事，想精进自己的技术，必须花时间才行\r\n \r\n-# 常见面试题（带上问题学习吧）\r\n-以下这些问题可能你已经有答案了，但是你能从源码角度回答出来吗。\r\n-\r\n-1.jsx和Fiber有什么关系\r\n-2.Fiber是什么，它为什么能提高性能\r\n-\r\n-# hooks\r\n-1.为什么hooks不能写在条件判断中\r\n-2.useEffect是什么,怎么用,里面的参数代表什么\r\n-\r\n-# 状态/生命周期\r\n-1.setState是同步的还是异步的\r\n-2.componentWillMount、componentWillMount、componentWillUpdate为什么标记UNSAFE\r\n-\r\n-# 组件\r\n-\r\n-1.react元素$$typeof属性什么\r\n-2.react怎么区分Class组件和Function组件\r\n-3.函数组件和类组件的相同点和不同点\r\n-\r\n-# 开放性问题\r\n-\r\n-1.说说你对react的理解/请说一下react的渲染过程\r\n-2.聊聊react新旧生命周期\r\n-3.简述diff算法\r\n-4.react有哪些优化手段\r\n-5.说说virtual Dom的理解\r\n-6.你对合成事件的理解\r\n-7.我们写的事件是绑定在dom上么，如果不是绑定在哪里？\r\n-8.为什么我们的事件手动绑定this(不是箭头函数的情况)\r\n-9.useMemo和useCallback的区别\r\n-10.react怎么通过dom元素，找到与之对应的 fiber对象的？\r\n-\r\n-# 解释结果和现象\r\n-\r\n-1.点击Father组件的div，Child会打印Child吗\r\n-\r\n-function Child() {\r\n-  console.log('Child');\r\n-  return <div>Child</div>;\r\n-}\r\n-    \r\n-    \r\n-function Father(props) {\r\n-  const [num, setNum] = React.useState(0);\r\n-  return (\r\n-    <div onClick={() => {setNum(num + 1)}}>\r\n-      {num}\r\n-      {props.children}\r\n-    </div>\r\n-  );\r\n-}\r\n-    \r\n-    \r\n-function App() {\r\n-  return (\r\n-    <Father>\r\n-      <Child/>\r\n-    </Father>\r\n-  );\r\n-}\r\n-    \r\n-const rootEl = document.querySelector(\"#root\");\r\n-ReactDOM.render(<App/>, rootEl);\r\n-\r\n-2.打印顺序是什么\r\n-\r\n-function Child() {\r\n-  useEffect(() => {\r\n-    console.log('Child');\r\n-  }, [])\r\n-  return <h1>child</h1>;\r\n-}\r\n-    \r\n-function Father() {\r\n-  useEffect(() => {\r\n-    console.log('Father');\r\n-  }, [])\r\n-      \r\n-  return <Child/>;\r\n-}\r\n-    \r\n-function App() {\r\n-  useEffect(() => {\r\n-    console.log('App');\r\n-  }, [])\r\n-    \r\n-  return <Father/>;\r\n-}\r\n-3.useLayoutEffect/componentDidMount和useEffect的区别是什么\r\n-\r\n-class App extends React.Component {\r\n-  componentDidMount() {\r\n-    console.log('mount');\r\n-  }\r\n-}\r\n-    \r\n-useEffect(() => {\r\n-  console.log('useEffect');\r\n-}, [])\r\n+# 常见面试题 \r\n"
                },
                {
                    "date": 1666694762995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,5 +8,116 @@\n 首先，我们可以从函数调用栈入手，理清react的各个模块的功能和它们调用的顺序，盖房子一样，先搭好架子，对源码有个整体的认识，然后再看每个模块的细节，第一遍的时候切忌纠结每个函数实现的细节，陷入各个函数的深度调用中。其次可以结合一些demo和自己画图理解，react源码中设计大量的链表操作，画图是一个很好的理解指针操作的方式。源码里也有一些英文注释，可以根据注释或者根据此react源码解析文章进行理解。\r\n \r\n 熟悉react源码并不是一朝一夕的事，想精进自己的技术，必须花时间才行\r\n \r\n-# 常见面试题 \r\n+# 常见面试题（带上问题学习吧）\r\n+以下这些问题可能你已经有答案了，但是你能从源码角度回答出来吗。\r\n+\r\n+1.jsx和Fiber有什么关系\r\n+\r\n+2.Fiber是什么，它为什么能提高性能\r\n+\r\n+# hooks\r\n+1.为什么hooks不能写在条件判断中\r\n+\r\n+2.useEffect是什么,怎么用,里面的参数代表什么\r\n+\r\n+# 状态/生命周期\r\n+1.setState是同步的还是异步的\r\n+\r\n+2.componentWillMount、componentWillMount、componentWillUpdate为什么标记UNSAFE\r\n+\r\n+# 组件\r\n+\r\n+1.react元素$$typeof属性什么\r\n+\r\n+2.react怎么区分Class组件和Function组件\r\n+\r\n+3.函数组件和类组件的相同点和不同点\r\n+\r\n+# 开放性问题\r\n+\r\n+1.说说你对react的理解/请说一下react的渲染过程\r\n+\r\n+2.聊聊react新旧生命周期\r\n+\r\n+3.简述diff算法\r\n+\r\n+4.react有哪些优化手段\r\n+\r\n+5.说说virtual Dom的理解\r\n+\r\n+6.你对合成事件的理解\r\n+\r\n+7.我们写的事件是绑定在dom上么，如果不是绑定在哪里？\r\n+\r\n+8.为什么我们的事件手动绑定this(不是箭头函数的情况)\r\n+\r\n+9.useMemo和useCallback的区别\r\n+\r\n+10.react怎么通过dom元素，找到与之对应的 fiber对象的？\r\n+\r\n+\r\n+# 1.点击Father组件的div，Child会打印Child吗\r\n+\r\n+function Child() {\r\n+    console.log('Child');\r\n+    return <div>Child</div>;\r\n+    }\r\n+\r\n+function Father(props) {\r\n+    const [num, setNum] = React.useState(0);\r\n+    return (\r\n+        <div onClick={() => {setNum(num + 1)}}>\r\n+        {num}\r\n+        {props.children}\r\n+        </div>\r\n+    );\r\n+    }\r\n+        \r\n+        \r\n+function App() {\r\n+    return (\r\n+        <Father>\r\n+        <Child/>\r\n+        </Father>\r\n+    );\r\n+    }\r\n+        \r\n+const rootEl = document.querySelector(\"#root\");\r\n+ReactDOM.render(<App/>, rootEl);\r\n+\r\n+# 打印顺序是什么\r\n+\r\n+function Child() {\r\n+    useEffect(() => {\r\n+        console.log('Child');\r\n+    }, [])\r\n+    return <h1>child</h1>;\r\n+    }\r\n+        \r\n+function Father() {\r\n+    useEffect(() => {\r\n+        console.log('Father');\r\n+    }, [])\r\n+        \r\n+    return <Child/>;\r\n+    }\r\n+        \r\n+function App() {\r\n+    useEffect(() => {\r\n+        console.log('App');\r\n+    }, [])\r\n+        \r\n+    return <Father/>;\r\n+    }\r\n+# useLayoutEffect/componentDidMount和useEffect的区别是什么\r\n+\r\n+class App extends React.Component {\r\n+  componentDidMount() {\r\n+    console.log('mount');\r\n+  }\r\n+}\r\n+    \r\n+useEffect(() => {\r\n+  console.log('useEffect');\r\n+}, [])\r\n"
                }
            ],
            "date": 1666689929538,
            "name": "Commit-0",
            "content": "# 学习react的方法和常见的问题\r\n\r\n怎样学习react源码\r\n作为前端最常用的js库之一，熟悉react源码成了高级或资深前端工程师必备的能力，如果你不想停留在api的使用层面或者想在前端技能的深度上有所突破，那熟悉react源码将是你进步的很好的方式。\r\n\r\nreact的纯粹体现在它的api上，一切都是围绕setState状态更新进行的，但是内部的逻辑却经历了很大的重构和变化，而且代码量也不小，如果只是从源码文件和函数来阅读，那会很难以理解react的渲染流程。优秀工程师几年时间打造的库，必定有借鉴之处，那么我们应该怎样学习react源码呢。\r\n\r\n首先，我们可以从函数调用栈入手，理清react的各个模块的功能和它们调用的顺序，盖房子一样，先搭好架子，对源码有个整体的认识，然后再看每个模块的细节，第一遍的时候切忌纠结每个函数实现的细节，陷入各个函数的深度调用中。其次可以结合一些demo和自己画图理解，react源码中设计大量的链表操作，画图是一个很好的理解指针操作的方式。源码里也有一些英文注释，可以根据注释或者根据此react源码解析文章进行理解。\r\n\r\n熟悉react源码并不是一朝一夕的事，想精进自己的技术，必须花时间才行\r\n\r\n# 常见面试题（带上问题学习吧）\r\n以下这些问题可能你已经有答案了，但是你能从源码角度回答出来吗。\r\n\r\n1.jsx和Fiber有什么关系\r\n2.Fiber是什么，它为什么能提高性能\r\n\r\n# hooks\r\n1.为什么hooks不能写在条件判断中\r\n2.useEffect是什么,怎么用,里面的参数代表什么\r\n\r\n# 状态/生命周期\r\n1.setState是同步的还是异步的\r\n2.componentWillMount、componentWillMount、componentWillUpdate为什么标记UNSAFE\r\n\r\n# 组件\r\n\r\n1.react元素$$typeof属性什么\r\n2.react怎么区分Class组件和Function组件\r\n3.函数组件和类组件的相同点和不同点\r\n\r\n# 开放性问题\r\n\r\n1.说说你对react的理解/请说一下react的渲染过程\r\n2.聊聊react新旧生命周期\r\n3.简述diff算法\r\n4.react有哪些优化手段\r\n5.说说virtual Dom的理解\r\n6.你对合成事件的理解\r\n7.我们写的事件是绑定在dom上么，如果不是绑定在哪里？\r\n8.为什么我们的事件手动绑定this(不是箭头函数的情况)\r\n9.useMemo和useCallback的区别\r\n10.react怎么通过dom元素，找到与之对应的 fiber对象的？\r\n\r\n# 解释结果和现象\r\n\r\n1.点击Father组件的div，Child会打印Child吗\r\n\r\nfunction Child() {\r\n  console.log('Child');\r\n  return <div>Child</div>;\r\n}\r\n    \r\n    \r\nfunction Father(props) {\r\n  const [num, setNum] = React.useState(0);\r\n  return (\r\n    <div onClick={() => {setNum(num + 1)}}>\r\n      {num}\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n    \r\n    \r\nfunction App() {\r\n  return (\r\n    <Father>\r\n      <Child/>\r\n    </Father>\r\n  );\r\n}\r\n    \r\nconst rootEl = document.querySelector(\"#root\");\r\nReactDOM.render(<App/>, rootEl);\r\n\r\n2.打印顺序是什么\r\n\r\nfunction Child() {\r\n  useEffect(() => {\r\n    console.log('Child');\r\n  }, [])\r\n  return <h1>child</h1>;\r\n}\r\n    \r\nfunction Father() {\r\n  useEffect(() => {\r\n    console.log('Father');\r\n  }, [])\r\n      \r\n  return <Child/>;\r\n}\r\n    \r\nfunction App() {\r\n  useEffect(() => {\r\n    console.log('App');\r\n  }, [])\r\n    \r\n  return <Father/>;\r\n}\r\n3.useLayoutEffect/componentDidMount和useEffect的区别是什么\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    console.log('mount');\r\n  }\r\n}\r\n    \r\nuseEffect(() => {\r\n  console.log('useEffect');\r\n}, [])\r\n"
        }
    ]
}